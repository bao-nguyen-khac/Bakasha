openapi: 3.0.3
info:
  title: REST API for management Library
  # description: |-
  #   This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
  #   Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
  #   You can now help us improve the API whether it's by making changes to the definition itself or to the code.
  #   That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

  #   _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
  #   Some useful links:
  #   - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
  #   - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: book
    description: Everything about Book
  - name: author
    description: Everything about Author
paths:
  /book/new:
    post:
      tags:
        - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookRequest'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Successful'
        '404':
          description: Invalid Author Id
  /book/detail:
    get:
      tags:
        - book
      parameters:
        - name: id
          in: query
          description: ID of book to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '500':
          description: Internal Server Error
  /book/update:
    put:
      tags:
        - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookRequest'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Successful'
        '404':
          description: Invalid Author Id
  /author/new:
    post:
      tags:
        - author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Successful'
        '404':
          description: Invalid Book Id or Author Id
  /author/detail:
    get:
      tags:
        - author
      parameters:
        - name: id
          in: query
          description: ID of author to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '500':
          description: Internal Server Error  
  /author/update:
    put:
      tags:
        - author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Successful'
        '404':
          description: Invalid Author Id
  
components:
  schemas:
    Successful:
      type: object
      properties:
        message:
          type: string
          example: Operation successful
    BookRequest:
      type: object
      properties:
        name:
          type: string
          example: Docker in action
        genres:
          type: string
          example: example
        image:
          type: string
          example: image.link
        description:
          type: text
          example: Text
        authorId:
          type: long
          example: 1
    BookResponse:
      type: object
      properties:
        id:
          type: long
          example: 1
        name:
          type: string
          example: Docker in action
        genres:
          type: string
          example: example
        image:
          type: string
          example: image.link
        description:
          type: text
          example: Text
        authorId:
          type: long
          example: 1
        authorName:
          type: string
          example: Docker
    AuthorRequest:
      type: object
      properties:
        name:
          type: string
          example: Elon Musk
        about:
          type: string
          example: example
        portrait:
          type: string
          example: image.link
    AuthorResponse:
      type: object
      properties:
        id:
          type: long
          example: 1
        name:
          type: string
          example: Elon Musk
        about:
          type: string
          example: example
        portrait:
          type: string
          example: image.link
        books:
          type: array
          example: []
        numBook:
          type: long
          example: 2

        
        
  